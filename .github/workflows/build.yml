name: CI Build

on:
  push:
    branches:
      - main
    paths:
      - "apps/**"
      - "packages/**"
      - "package.json"
      - "package-lock.json"
      - "tsconfig*.json"
  workflow_dispatch:
    inputs:
      description:
        description: "Description of this build (optional)"
        required: false
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: |
          # First try with ci, if it fails due to package-lock mismatch, use install
          npm ci || npm install

      - name: Type check
        run: npm run type-check

      - name: Lint code
        run: npm run lint

      - name: Check formatting
        run: npx prettier --check "**/*.{js,jsx,ts,tsx,json,md,css,scss}"

      - name: Build dependency packages
        run: npm run build:packages

      - name: Build
        run: npm run build

      # Create deployment artifact directory
      - name: Prepare API deployment artifacts
        run: |
          mkdir -p deploy-api/apps/api/dist
          mkdir -p deploy-api/packages/database/dist
          mkdir -p deploy-api/packages/shared/dist
          mkdir -p deploy-api/packages/ui/dist

          # Copy necessary files
          cp -r apps/api/dist/* deploy-api/apps/api/dist/
          cp -r packages/database/dist/* deploy-api/packages/database/dist/
          cp -r packages/shared/dist/* deploy-api/packages/shared/dist/
          cp -r packages/ui/dist/* deploy-api/packages/ui/dist/

          # Copy package files for dependency installation
          cp package.json package-lock.json deploy-api/
          cp apps/api/package.json deploy-api/apps/api/
          cp packages/database/package.json deploy-api/packages/database/
          cp packages/shared/package.json deploy-api/packages/shared/
          cp packages/ui/package.json deploy-api/packages/ui/

          # Temporarily modify package.json to remove husky and fix Node.js version requirement
          echo "Modifying package.json to remove husky..."
          cd deploy-api
          jq 'del(.scripts.prepare)' package.json > package.json.tmp
          mv package.json.tmp package.json

          # No need to extract and update NestJS versions since they're already aligned in the source files
          echo "NestJS dependencies are already aligned in source package.json files"

          cd ..

          # Copy Dockerfile and fly.toml files
          cp apps/api/Dockerfile deploy-api/Dockerfile

          # Create production fly.toml
          cat > deploy-api/fly.production.toml << EOL
          app = "supply-chain-system-api"
          primary_region = "syd"

          [build]
            dockerfile = "Dockerfile"

          [env]
            NODE_ENV = "production"
            PORT = "3001"
            DATABASE_URL = "${{ secrets.PRODUCTION_DATABASE_URL }}"
            JWT_SECRET = "${{ secrets.PRODUCTION_JWT_SECRET }}"

          [http_service]
            internal_port = 3001
            force_https = true
            auto_stop_machines = true
            auto_start_machines = true
            min_machines_running = 1
            processes = ["app"]
            
            [[http_service.checks]]
              interval = "10s"
              timeout = "2s"
              grace_period = "5s"
              method = "get"
              path = "/health"
              protocol = "http"

          [processes]
            app = "node dist/main.js"
          EOL

          # Create staging fly.toml
          cat > deploy-api/fly.staging.toml << EOL
          app = "supply-chain-system-api-staging"
          primary_region = "syd"

          [build]
            dockerfile = "Dockerfile"

          [env]
            NODE_ENV = "staging"
            PORT = "3001"
            DATABASE_URL = "${{ secrets.STAGING_DATABASE_URL }}"
            JWT_SECRET = "${{ secrets.STAGING_JWT_SECRET }}"

          [http_service]
            internal_port = 3001
            force_https = true
            auto_stop_machines = true
            auto_start_machines = true
            min_machines_running = 0
            processes = ["app"]
            
            [[http_service.checks]]
              interval = "10s"
              timeout = "2s"
              grace_period = "5s"
              method = "get"
              path = "/health"
              protocol = "http"

          [processes]
            app = "node dist/main.js"
          EOL

          # Create a README with deployment instructions
          cat > deploy-api/README.md << EOL
          # API Deployment Package

          This package contains pre-built artifacts for the Supply Chain System API.

          ## Deployment Instructions

          ### For Production

          \`\`\`bash
          cd deploy-api
          flyctl deploy --config fly.production.toml --remote-only
          \`\`\`

          ### For Staging

          \`\`\`bash
          cd deploy-api
          flyctl deploy --config fly.staging.toml --remote-only
          \`\`\`
          EOL

          # Create a compressed tarball instead of zip
          echo "Creating compressed API deployment package..."
          tar -czf api-deployment.tar.gz -C deploy-api .

      # Prepare Web deployment artifacts
      - name: Prepare Web deployment artifacts
        run: |
          mkdir -p deploy-web
          cp -r apps/web/.next deploy-web/
          cp -r apps/web/public deploy-web/
          cp apps/web/package.json deploy-web/
          cp apps/web/next.config.js deploy-web/

          # Create a README with deployment instructions
          cat > deploy-web/README.md << EOL
          # Web Deployment Package

          This package contains pre-built artifacts for the Supply Chain System Web frontend.

          ## Deployment Instructions

          Deploy to Vercel using the \`--prebuilt\` flag:

          \`\`\`bash
          vercel --prod --prebuilt
          \`\`\`
          EOL

          # Create a compressed tarball instead of zip
          echo "Creating compressed Web deployment package..."
          tar -czf web-deployment.tar.gz -C deploy-web .

      # Upload API deployment artifact
      - name: Upload API deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-deployment
          path: api-deployment.tar.gz
          retention-days: 7

      # Upload Web deployment artifact
      - name: Upload Web deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: web-deployment
          path: web-deployment.tar.gz
          retention-days: 7

      # Create a build info file with metadata
      - name: Create build info
        run: |
          echo "{\"build_id\": \"${{ github.run_id }}\", \"commit\": \"${{ github.sha }}\", \"timestamp\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"}" > build-info.json

      # Upload build info
      - name: Upload build info
        uses: actions/upload-artifact@v4
        with:
          name: build-info
          path: build-info.json
          retention-days: 30
