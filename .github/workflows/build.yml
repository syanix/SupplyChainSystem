name: CI Build

on:
  push:
    branches:
      - main
    paths:
      - "apps/**"
      - "packages/**"
      - "package.json"
      - "package-lock.json"
      - "tsconfig*.json"
  workflow_dispatch:
    inputs:
      description:
        description: "Description of this build (optional)"
        required: false
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm ci || npm install

      - name: Type check
        run: npm run type-check

      - name: Lint code
        run: npm run lint

      - name: Build all projects
        run: npm run build

      # Package API project
      - name: Package API project
        run: |
          # Create directory structure
          mkdir -p api-artifact/apps/api
          mkdir -p api-artifact/packages/database/dist
          mkdir -p api-artifact/packages/database/prisma
          mkdir -p api-artifact/packages/shared/dist
          mkdir -p api-artifact/packages/ui/dist

          # Copy API dist folder
          cp -r apps/api/dist api-artifact/apps/api/

          # Copy package.json files
          cp package.json package-lock.json api-artifact/
          cp apps/api/package.json api-artifact/apps/api/
          cp packages/database/package.json api-artifact/packages/database/
          cp packages/shared/package.json api-artifact/packages/shared/
          cp packages/ui/package.json api-artifact/packages/ui/

          # Remove husky prepare script from package.json
          cd api-artifact
          jq 'del(.scripts.prepare)' package.json > package.json.tmp
          mv package.json.tmp package.json

          # Install production dependencies
          npm ci --omit=dev --no-optional

          # Copy packages dist folders
          cp -r ../packages/database/dist/* packages/database/dist/
          cp -r ../packages/shared/dist/* packages/shared/dist/
          cp -r ../packages/ui/dist/* packages/ui/dist/

          # Copy Prisma schema and generate client
          cp -r ../packages/database/prisma/* packages/database/prisma/
          cd packages/database
          npx prisma generate
          cd ../..

          # Create a simple Dockerfile
          cat > Dockerfile << EOL
          FROM node:20-alpine

          WORKDIR /app

          # Install OpenSSL for Prisma
          RUN apk add --no-cache openssl

          # Copy package files and pre-built artifacts
          COPY . .

          # Expose the port the app runs on
          EXPOSE 3001

          # Set NODE_ENV to production
          ENV NODE_ENV=production

          # Run the app
          CMD ["node", "apps/api/dist/main.js"]
          EOL

          # Create a README
          cat > README.md << EOL
          # API Deployment Package

          This package contains pre-built artifacts for the Supply Chain System API.

          ## Deployment Instructions

          1. Build the Docker image:
             \`\`\`bash
             docker build -t supply-chain-api .
             \`\`\`

          2. Run the container:
             \`\`\`bash
             docker run -p 3001:3001 -e DATABASE_URL=your_database_url -e JWT_SECRET=your_jwt_secret supply-chain-api
             \`\`\`
          EOL

          cd ..
          # Create a compressed tarball
          tar -czf api-artifact.tar.gz -C api-artifact .

      # Package Web project
      - name: Package Web project
        run: |
          mkdir -p web-artifact

          # Copy Next.js build output
          cp -r apps/web/.next web-artifact/
          cp -r apps/web/public web-artifact/
          cp apps/web/package.json web-artifact/
          cp apps/web/next.config.js web-artifact/

          # Create a README
          cat > web-artifact/README.md << EOL
          # Web Deployment Package

          This package contains pre-built artifacts for the Supply Chain System Web frontend.

          ## Deployment Instructions

          Deploy to Vercel using the \`--prebuilt\` flag:

          \`\`\`bash
          vercel --prod --prebuilt
          \`\`\`
          EOL

          # Create a compressed tarball
          tar -czf web-artifact.tar.gz -C web-artifact .

      # Upload API artifact
      - name: Upload API artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-artifact
          path: api-artifact.tar.gz
          retention-days: 7

      # Upload Web artifact
      - name: Upload Web artifact
        uses: actions/upload-artifact@v4
        with:
          name: web-artifact
          path: web-artifact.tar.gz
          retention-days: 7

      # Create a build info file with metadata
      - name: Create build info
        run: |
          echo "{\"build_id\": \"${{ github.run_id }}\", \"commit\": \"${{ github.sha }}\", \"timestamp\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"}" > build-info.json

      # Upload build info
      - name: Upload build info
        uses: actions/upload-artifact@v4
        with:
          name: build-info
          path: build-info.json
          retention-days: 30
