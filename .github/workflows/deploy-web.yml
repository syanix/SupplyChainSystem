name: Deploy Web to Vercel

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production
      confirm:
        description: 'Type "yes" to confirm deployment'
        required: true
        type: string

# Add permissions block
permissions:
  contents: read
  actions: read

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Check confirmation
        if: ${{ inputs.confirm != 'yes' }}
        run: |
          echo "Deployment not confirmed. Please set confirm input to 'yes' to proceed."
          exit 1

  deploy:
    needs: validate
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy to Vercel
        id: deploy
        run: |
          # Set environment-specific variables
          VERCEL_ARGS="--token ${{ secrets.VERCEL_TOKEN }} --yes"

          if [ "${{ inputs.environment }}" == "production" ]; then
            VERCEL_ARGS="$VERCEL_ARGS --prod"
            echo "Running Vercel deployment with command: vercel $VERCEL_ARGS --env NEXT_PUBLIC_API_URL=https://supply-chain-system-api.fly.dev"
            DEPLOYMENT_URL=$(vercel $VERCEL_ARGS --env NEXT_PUBLIC_API_URL=https://supply-chain-system-api.fly.dev | tee /dev/stderr | grep -o 'https://.*')
          else
            echo "Running Vercel deployment with command: vercel $VERCEL_ARGS --env NEXT_PUBLIC_API_URL=https://staging-supply-chain-system-api.fly.dev"
            DEPLOYMENT_URL=$(vercel $VERCEL_ARGS --env NEXT_PUBLIC_API_URL=https://staging-supply-chain-system-api.fly.dev | tee /dev/stderr | grep -o 'https://.*')
          fi

          echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "Deployed to: $DEPLOYMENT_URL"

      - name: Verify Deployment
        run: |
          DEPLOYMENT_URL="${{ steps.deploy.outputs.deployment-url }}"

          echo "Verifying deployment at URL: $DEPLOYMENT_URL"

          # Wait for the app to be ready
          echo "Waiting for the app to be ready..."
          sleep 10

          # Check the health endpoint
          MAX_RETRIES=6
          RETRY_COUNT=0

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $DEPLOYMENT_URL || echo "failed")
            
            if [ "$HTTP_STATUS" == "200" ]; then
              echo "Health check passed! Application is running."
              exit 0
            else
              echo "Health check failed with status: $HTTP_STATUS. Retrying in 10 seconds..."
              RETRY_COUNT=$((RETRY_COUNT + 1))
              sleep 10
            fi
          done

          echo "Health check failed after $MAX_RETRIES attempts."
          echo "Deployment verification failed."
          exit 1
