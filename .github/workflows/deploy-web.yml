name: Deploy Web to Vercel

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production
      confirm:
        description: 'Type "yes" to confirm deployment'
        required: true
        type: string

# Add permissions block
permissions:
  contents: read
  actions: read

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Check confirmation
        if: ${{ inputs.confirm != 'yes' }}
        run: |
          echo "Deployment not confirmed. Please set confirm input to 'yes' to proceed."
          exit 1

  deploy:
    needs: validate
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check monorepo structure
        run: |
          echo "Checking monorepo structure..."

          # Check if apps/web directory exists
          if [ -d "apps/web" ]; then
            echo "✅ Found apps/web directory"
          else
            echo "❌ apps/web directory not found"
            echo "Directory structure:"
            find . -type d -maxdepth 2 | sort
            exit 1
          fi

          # Check if apps/web/package.json exists
          if [ -f "apps/web/package.json" ]; then
            echo "✅ Found apps/web/package.json"
          else
            echo "❌ apps/web/package.json not found"
            exit 1
          fi

          # Check if apps/web/next.config.js exists
          if [ -f "apps/web/next.config.js" ]; then
            echo "✅ Found apps/web/next.config.js"
          else
            echo "❌ apps/web/next.config.js not found"
            exit 1
          fi

          echo "Monorepo structure looks good!"

      - name: Prepare web app for standalone deployment
        run: |
          echo "Preparing web app for standalone deployment..."

          # Copy shared packages to web app's node_modules
          mkdir -p apps/web/node_modules/@supply-chain-system

          # Copy shared package
          if [ -d "packages/shared" ]; then
            echo "Copying shared package..."
            cp -r packages/shared apps/web/node_modules/@supply-chain-system/
            # Build the shared package
            cd packages/shared
            npm install
            npm run build
            cd ../..
          fi

          # Copy UI package
          if [ -d "packages/ui" ]; then
            echo "Copying UI package..."
            cp -r packages/ui apps/web/node_modules/@supply-chain-system/
            # Build the UI package
            cd packages/ui
            npm install
            npm run build
            cd ../..
          fi

          # Copy database package if needed
          if [ -d "packages/database" ]; then
            echo "Copying database package..."
            cp -r packages/database apps/web/node_modules/@supply-chain-system/
            # Build the database package
            cd packages/database
            npm install
            npm run build
            cd ../..
          fi

          echo "Web app prepared for standalone deployment!"

      - name: Remove Husky prepare script
        run: |
          if [ -f "package.json" ]; then
            # Check if the prepare script exists and contains husky
            if grep -q "\"prepare\".*husky" package.json; then
              echo "Removing husky prepare script from package.json"
              # Use jq to remove the prepare script
              jq 'del(.scripts.prepare)' package.json > package.json.tmp
              mv package.json.tmp package.json
            else
              echo "No husky prepare script found in package.json"
            fi
          else
            echo "package.json not found"
          fi

          # Also check and remove from web app's package.json
          if [ -f "apps/web/package.json" ]; then
            if grep -q "\"prepare\".*husky" apps/web/package.json; then
              echo "Removing husky prepare script from apps/web/package.json"
              cd apps/web
              jq 'del(.scripts.prepare)' package.json > package.json.tmp
              mv package.json.tmp package.json
              cd ../..
            fi
          fi

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy to Vercel
        id: deploy
        run: |
          # Change to web app directory
          cd apps/web

          # Set environment-specific variables
          VERCEL_ARGS="--token ${{ secrets.VERCEL_TOKEN }} --yes"

          # Set project name based on environment
          if [ "${{ inputs.environment }}" == "production" ]; then
            PROJECT_NAME="supply-chain-system"
            VERCEL_ARGS="$VERCEL_ARGS --prod --name $PROJECT_NAME"
            echo "Running Vercel deployment with command: vercel $VERCEL_ARGS --env NEXT_PUBLIC_API_URL=https://supply-chain-system-api.fly.dev"
            DEPLOYMENT_URL=$(vercel $VERCEL_ARGS --env NEXT_PUBLIC_API_URL=https://supply-chain-system-api.fly.dev | tee /dev/stderr | grep -o 'https://.*')
          else
            PROJECT_NAME="staging-supply-chain-system"
            VERCEL_ARGS="$VERCEL_ARGS --name $PROJECT_NAME"
            echo "Running Vercel deployment with command: vercel $VERCEL_ARGS --env NEXT_PUBLIC_API_URL=https://staging-supply-chain-system-api.fly.dev"
            DEPLOYMENT_URL=$(vercel $VERCEL_ARGS --env NEXT_PUBLIC_API_URL=https://staging-supply-chain-system-api.fly.dev | tee /dev/stderr | grep -o 'https://.*')
          fi

          echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "Deployed to: $DEPLOYMENT_URL"

      - name: Verify Deployment
        run: |
          DEPLOYMENT_URL="${{ steps.deploy.outputs.deployment-url }}"

          echo "Verifying deployment at URL: $DEPLOYMENT_URL"

          # Wait for the app to be ready
          echo "Waiting for the app to be ready..."
          sleep 10

          # Check the health endpoint
          MAX_RETRIES=6
          RETRY_COUNT=0

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $DEPLOYMENT_URL || echo "failed")
            
            if [ "$HTTP_STATUS" == "200" ]; then
              echo "Health check passed! Application is running."
              exit 0
            else
              echo "Health check failed with status: $HTTP_STATUS. Retrying in 10 seconds..."
              RETRY_COUNT=$((RETRY_COUNT + 1))
              sleep 10
            fi
          done

          echo "Health check failed after $MAX_RETRIES attempts."
          echo "Deployment verification failed."
          exit 1
