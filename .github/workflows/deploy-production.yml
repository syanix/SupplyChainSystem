name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "yes" to confirm deployment to production'
        required: true
        default: "no"
      build_id:
        description: "Build ID to deploy (leave empty for latest successful build)"
        required: false
      run_id:
        description: "Workflow run ID containing the artifacts (leave empty to search automatically)"
        required: false

# Add permissions block to allow artifact download
permissions:
  contents: read
  actions: read # This is needed for downloading artifacts

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Validate confirmation
        if: github.event.inputs.confirm != 'yes'
        run: |
          echo "Deployment not confirmed. Please type 'yes' to confirm."
          exit 1

  deploy-production:
    needs: validate
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code for configuration
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github
          sparse-checkout-cone-mode: false

      # Find the latest successful build workflow run if run_id is not specified
      - name: Find latest successful build
        id: find_build
        if: github.event.inputs.run_id == ''
        run: |
          echo "Searching for the latest successful build workflow run..."

          # Get the latest successful workflow runs
          WORKFLOW_RUNS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yml/runs?status=success&per_page=1")

          # Extract the run ID from the response
          RUN_ID=$(echo $WORKFLOW_RUNS | jq -r '.workflow_runs[0].id')

          if [ "$RUN_ID" = "null" ] || [ -z "$RUN_ID" ]; then
            echo "No successful CI build workflow runs found."
            echo "run_id=" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Found latest successful CI build workflow run: $RUN_ID"
            echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
          fi

      # Set the run ID
      - name: Set run ID
        id: set_run_id
        run: |
          if [ -n "${{ github.event.inputs.run_id }}" ]; then
            echo "RUN_ID=${{ github.event.inputs.run_id }}" >> $GITHUB_ENV
            echo "Using specified run ID: ${{ github.event.inputs.run_id }}"
          elif [ -n "${{ steps.find_build.outputs.run_id }}" ]; then
            echo "RUN_ID=${{ steps.find_build.outputs.run_id }}" >> $GITHUB_ENV
            echo "Using latest successful build run ID: ${{ steps.find_build.outputs.run_id }}"
          else
            echo "No run ID specified and no successful builds found. Please specify a run ID."
            exit 1
          fi

      # Download build info to get the latest build ID if not specified
      - name: Download build info
        id: download_build_info
        uses: actions/download-artifact@v4
        with:
          name: build-info
          path: .
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          run-id: ${{ env.RUN_ID }}
          if-no-artifact-found: warn
        if: github.event.inputs.build_id == ''
        continue-on-error: true

      # Check if build-info.json exists
      - name: Check build info
        id: check_build_info
        run: |
          if [ -f "build-info.json" ]; then
            echo "build_info_exists=true" >> $GITHUB_OUTPUT
          else
            echo "build_info_exists=false" >> $GITHUB_OUTPUT
          fi

      # Set the build ID
      - name: Set build ID
        id: set_build_id
        run: |
          if [ -n "${{ github.event.inputs.build_id }}" ]; then
            echo "BUILD_ID=${{ github.event.inputs.build_id }}" >> $GITHUB_ENV
            echo "Using specified build ID: ${{ github.event.inputs.build_id }}"
          elif [ "${{ steps.check_build_info.outputs.build_info_exists }}" = "true" ]; then
            BUILD_ID=$(jq -r '.build_id' build-info.json)
            echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
            echo "Using build ID from build-info.json: $BUILD_ID"
          else
            echo "Using run ID as build ID: ${{ env.RUN_ID }}"
            echo "BUILD_ID=${{ env.RUN_ID }}" >> $GITHUB_ENV
          fi

      # Download API deployment artifact
      - name: Download API deployment artifact
        id: download_api
        uses: actions/download-artifact@v4
        with:
          name: api-deployment
          path: .
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          run-id: ${{ env.RUN_ID }}
          if-no-artifact-found: warn
        continue-on-error: true

      # Check if API deployment artifact was downloaded
      - name: Check API artifact
        id: check_api
        run: |
          if [ -f "api-deployment.tar.gz" ]; then
            echo "api_artifact_exists=true" >> $GITHUB_OUTPUT
          else
            echo "api_artifact_exists=false" >> $GITHUB_OUTPUT
            echo "API deployment artifact not found. Please ensure a build has been completed successfully."
            exit 1
          fi

      # Extract API deployment package
      - name: Extract API deployment package
        if: steps.check_api.outputs.api_artifact_exists == 'true'
        run: |
          mkdir -p deploy-api
          echo "Extracting API deployment package..."
          tar -xzf api-deployment.tar.gz -C deploy-api
          ls -la deploy-api

      # Install Fly CLI
      - name: Setup Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@1.4

      # Deploy to Fly.io
      - name: Deploy API to Fly.io (Production)
        if: steps.check_api.outputs.api_artifact_exists == 'true'
        run: |
          echo "Deploying API to Fly.io..."
          cd deploy-api

          # Decompress node_modules if compressed archive exists
          if [ -f "node_modules.tar.gz" ]; then
            echo "Decompressing node_modules..."
            tar -xzf node_modules.tar.gz
            rm node_modules.tar.gz
          fi

          # Create the directory structure expected by the Dockerfile
          mkdir -p apps/api
          mkdir -p packages/database
          mkdir -p packages/shared
          mkdir -p packages/ui

          # Move files to the correct locations if needed
          if [ -d "dist" ] && [ ! -d "apps/api/dist" ]; then
            mkdir -p apps/api/dist
            cp -r dist/* apps/api/dist/
          fi

          # Deploy using the appropriate fly.toml
          flyctl deploy --config fly.production.toml --remote-only

          echo "API deployment completed"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      # Download Web deployment artifact
      - name: Download Web deployment artifact
        id: download_web
        uses: actions/download-artifact@v4
        with:
          name: web-deployment
          path: .
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          run-id: ${{ env.RUN_ID }}
          if-no-artifact-found: warn
        continue-on-error: true

      # Check if Web deployment artifact was downloaded
      - name: Check Web artifact
        id: check_web
        run: |
          if [ -f "web-deployment.tar.gz" ]; then
            echo "web_artifact_exists=true" >> $GITHUB_OUTPUT
          else
            echo "web_artifact_exists=false" >> $GITHUB_OUTPUT
            echo "Web deployment artifact not found. Please ensure a build has been completed successfully."
            exit 1
          fi

      # Extract Web deployment package
      - name: Extract Web deployment package
        if: steps.check_web.outputs.web_artifact_exists == 'true'
        run: |
          mkdir -p deploy-web
          echo "Extracting Web deployment package..."
          tar -xzf web-deployment.tar.gz -C deploy-web
          ls -la deploy-web

      # Deploy to Vercel
      - name: Deploy Web to Vercel (Production)
        if: steps.check_web.outputs.web_artifact_exists == 'true'
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./deploy-web
          vercel-args: "--prod --prebuilt"

      - name: Check deployment health
        id: health_check
        if: steps.check_api.outputs.api_artifact_exists == 'true'
        run: |
          # Wait for deployment to stabilize
          sleep 30

          # Check API health endpoint
          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://api.your-domain.com/health)

          if [ "$HEALTH_STATUS" != "200" ]; then
            echo "status=failure" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
          fi

      - name: Rollback on failure
        if: steps.health_check.outputs.status == 'failure'
        run: |
          echo "Deployment failed. Manual rollback required."
          exit 1
