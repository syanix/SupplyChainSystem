name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "yes" to confirm deployment to production'
        required: true
        default: "no"
      build_id:
        description: "Build ID to deploy (leave empty for latest successful build)"
        required: false

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Validate confirmation
        if: github.event.inputs.confirm != 'yes'
        run: |
          echo "Deployment not confirmed. Please type 'yes' to confirm."
          exit 1

  deploy-production:
    needs: validate
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code for configuration
        uses: actions/checkout@v3
        with:
          sparse-checkout: |
            .github
          sparse-checkout-cone-mode: false

      # Download build info to get the latest build ID if not specified
      - name: Download build info
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: build.yml
          name: build-info
          path: .
          if_no_artifact_found: warn
        if: github.event.inputs.build_id == ''

      # Set the build ID
      - name: Set build ID
        id: set_build_id
        run: |
          if [ -n "${{ github.event.inputs.build_id }}" ]; then
            echo "BUILD_ID=${{ github.event.inputs.build_id }}" >> $GITHUB_ENV
            echo "Using specified build ID: ${{ github.event.inputs.build_id }}"
          elif [ -f "build-info.json" ]; then
            BUILD_ID=$(jq -r '.build_id' build-info.json)
            echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
            echo "Using latest build ID: $BUILD_ID"
          else
            echo "No build ID specified and no build info found. Please specify a build ID."
            exit 1
          fi

      # Download API deployment artifact
      - name: Download API deployment artifact
        uses: actions/download-artifact@v4
        with:
          name: api-deployment
          path: .

      # Extract API deployment package
      - name: Extract API deployment package
        run: |
          mkdir -p deploy-api
          unzip -o api-deployment.zip -d deploy-api
          ls -la deploy-api

      # Install Fly CLI
      - name: Setup Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      # Deploy to Fly.io
      - name: Deploy API to Fly.io (Production)
        run: |
          cd deploy-api
          flyctl deploy --config fly.production.toml --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      # Download Web deployment artifact
      - name: Download Web deployment artifact
        uses: actions/download-artifact@v4
        with:
          name: web-deployment
          path: .

      # Extract Web deployment package
      - name: Extract Web deployment package
        run: |
          mkdir -p deploy-web
          unzip -o web-deployment.zip -d deploy-web
          ls -la deploy-web

      # Deploy to Vercel
      - name: Deploy Web to Vercel (Production)
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./deploy-web
          vercel-args: "--prod --prebuilt"

      - name: Check deployment health
        id: health_check
        run: |
          # Wait for deployment to stabilize
          sleep 30

          # Check API health endpoint
          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://api.your-domain.com/health)

          if [ "$HEALTH_STATUS" != "200" ]; then
            echo "::set-output name=status::failure"
          else
            echo "::set-output name=status::success"
          fi

      - name: Rollback on failure
        if: steps.health_check.outputs.status == 'failure'
        run: |
          echo "Deployment failed. Manual rollback required."
          exit 1
