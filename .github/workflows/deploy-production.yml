name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "yes" to confirm deployment to production'
        required: true
        default: "no"

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Validate confirmation
        if: github.event.inputs.confirm != 'yes'
        run: |
          echo "Deployment not confirmed. Please type 'yes' to confirm."
          exit 1

  code-quality:
    needs: validate
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check

      - name: Lint code
        run: npm run lint

      - name: Check formatting
        run: npx prettier --check "**/*.{js,jsx,ts,tsx,json,md,css,scss}"

  deploy-production:
    needs: code-quality
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build dependency packages
        run: npm run build:packages

      - name: Build
        run: npm run build

      # Create deployment artifact directory
      - name: Prepare deployment artifacts
        run: |
          mkdir -p deploy/apps/api/dist
          mkdir -p deploy/packages/database/dist
          mkdir -p deploy/packages/shared/dist
          mkdir -p deploy/packages/ui/dist

          # Copy necessary files
          cp -r apps/api/dist/* deploy/apps/api/dist/
          cp -r packages/database/dist/* deploy/packages/database/dist/
          cp -r packages/shared/dist/* deploy/packages/shared/dist/
          cp -r packages/ui/dist/* deploy/packages/ui/dist/
          cp apps/api/Dockerfile deploy/
          cp apps/api/package.json deploy/apps/api/
          cp packages/database/package.json deploy/packages/database/
          cp packages/shared/package.json deploy/packages/shared/
          cp packages/ui/package.json deploy/packages/ui/
          cp package.json deploy/

      # Install Fly CLI
      - name: Setup Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      # Deploy to Fly.io
      - name: Deploy API to Fly.io (Production)
        run: |
          cd deploy
          flyctl deploy --config ../apps/api/fly.toml --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Deploy Web to Vercel (Production)
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./apps/web
          root-directory: .
          vercel-args: "--prod --prebuilt"

      - name: Check deployment health
        id: health_check
        run: |
          # Wait for deployment to stabilize
          sleep 30

          # Check API health endpoint
          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://api.your-domain.com/health)

          if [ "$HEALTH_STATUS" != "200" ]; then
            echo "::set-output name=status::failure"
          else
            echo "::set-output name=status::success"
          fi

      - name: Rollback on failure
        if: steps.health_check.outputs.status == 'failure'
        run: |
          # Rollback to previous version
          git checkout HEAD~1
          # Redeploy
          flyctl deploy --config ./apps/api/fly.toml --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
