name: Deploy API to Fly.io

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production
      confirm:
        description: 'Type "yes" to confirm deployment'
        required: true
        type: string

# Add permissions block
permissions:
  contents: read
  actions: read

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Check confirmation
        if: ${{ inputs.confirm != 'yes' }}
        run: |
          echo "Deployment not confirmed. Please set confirm input to 'yes' to proceed."
          exit 1

  deploy:
    needs: validate
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Setup Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@1.4

      - name: Create Dockerfile
        run: |
          cat > Dockerfile << EOL
          # Build stage
          FROM node:20-alpine AS builder

          # Set working directory
          WORKDIR /app

          # Install global packages
          RUN npm install -g @nestjs/cli@11

          # Copy package files
          COPY package.json package-lock.json ./
          COPY apps/api/package.json ./apps/api/
          COPY packages/database/package.json ./packages/database/
          COPY packages/shared/package.json ./packages/shared/
          COPY packages/ui/package.json ./packages/ui/

          # Install dependencies
          RUN npm ci

          # Copy source code
          COPY . .

          # Build packages first
          RUN npm run build:packages

          # Build API
          RUN cd apps/api && npm run build

          # Runtime stage
          FROM node:20-alpine

          # Install OpenSSL for Prisma and other necessary tools
          RUN apk add --no-cache openssl curl

          # Set working directory
          WORKDIR /app

          # Copy package files
          COPY package.json package-lock.json ./
          COPY apps/api/package.json ./apps/api/
          COPY packages/database/package.json ./packages/database/
          COPY packages/shared/package.json ./packages/shared/
          COPY packages/ui/package.json ./packages/ui/

          # Install production dependencies
          RUN npm ci --only=production

          # Install global packages needed for runtime
          RUN npm install -g @nestjs/config @nestjs/common @nestjs/core @nestjs/platform-express

          # Copy built files from builder
          COPY --from=builder /app/apps/api/dist ./apps/api/dist
          COPY --from=builder /app/packages/database/dist ./packages/database/dist
          COPY --from=builder /app/packages/database/prisma ./packages/database/prisma
          COPY --from=builder /app/packages/shared/dist ./packages/shared/dist
          COPY --from=builder /app/packages/ui/dist ./packages/ui/dist

          # Generate Prisma client
          RUN cd packages/database && npx prisma generate

          # Expose the port
          EXPOSE 3001

          # Set environment variables
          ENV NODE_ENV=production
          ENV PORT=3001

          # Start the application
          CMD ["node", "apps/api/dist/main.js"]
          EOL

      - name: Create fly.toml
        run: |
          # Create appropriate fly.toml based on environment
          if [ "${{ inputs.environment }}" == "production" ]; then
            APP_NAME="supply-chain-system-api"
            MIN_MACHINES=1
            echo "Creating production fly.toml"
          else
            APP_NAME="supply-chain-system-api-staging"
            MIN_MACHINES=0
            echo "Creating staging fly.toml"
          fi

          cat > fly.toml << EOL
          app = "${APP_NAME}"
          primary_region = "syd"

          [build]
          dockerfile = "Dockerfile"

          [env]
            NODE_ENV = "${{ inputs.environment }}"
            PORT = "3001"

          [http_service]
            internal_port = 3001
            force_https = true
            auto_stop_machines = true
            auto_start_machines = true
            min_machines_running = ${MIN_MACHINES}
            processes = ["app"]
            
            [[http_service.checks]]
              interval = "10s"
              timeout = "2s"
              grace_period = "5s"
              method = "get"
              path = "/health"
              protocol = "http"

          [processes]
            app = "node apps/api/dist/main.js"
          EOL

          echo "Created fly.toml for ${APP_NAME}"
          cat fly.toml

      - name: Deploy to Fly.io
        id: deploy
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          # Set environment-specific secrets
          if [ "${{ inputs.environment }}" == "production" ]; then
            APP_NAME="supply-chain-system-api"
            flyctl secrets set DATABASE_URL="${{ secrets.PRODUCTION_DATABASE_URL }}" JWT_SECRET="${{ secrets.PRODUCTION_JWT_SECRET }}" --app $APP_NAME
          else
            APP_NAME="supply-chain-system-api-staging"
            flyctl secrets set DATABASE_URL="${{ secrets.STAGING_DATABASE_URL }}" JWT_SECRET="${{ secrets.STAGING_JWT_SECRET }}" --app $APP_NAME
          fi

          # Deploy the application
          echo "Deploying to $APP_NAME"
          flyctl deploy --app $APP_NAME

          # Store the app name for later use
          echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT

      - name: Verify Deployment
        run: |
          APP_NAME="${{ steps.deploy.outputs.app_name }}"
          echo "Verifying deployment for app: $APP_NAME"

          # Wait for the app to be ready
          echo "Waiting for the app to be ready..."
          sleep 10

          # Check the health endpoint
          MAX_RETRIES=6
          RETRY_COUNT=0
          HEALTH_URL="https://$APP_NAME.fly.dev/health"

          echo "Checking health endpoint: $HEALTH_URL"

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_URL || echo "failed")
            
            if [ "$HTTP_STATUS" == "200" ]; then
              echo "Health check passed! Application is running."
              exit 0
            else
              echo "Health check failed with status: $HTTP_STATUS. Retrying in 10 seconds..."
              RETRY_COUNT=$((RETRY_COUNT + 1))
              sleep 10
            fi
          done

          echo "Health check failed after $MAX_RETRIES attempts."
          echo "Deployment verification failed. Consider rolling back."
          exit 1

      - name: Rollback on Failure
        if: failure() && steps.deploy.outcome == 'success'
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          APP_NAME="${{ steps.deploy.outputs.app_name }}"
          echo "Rolling back deployment for app: $APP_NAME"
          flyctl deploy rollback --app $APP_NAME
